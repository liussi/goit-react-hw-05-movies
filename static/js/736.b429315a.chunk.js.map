{"version":3,"file":"static/js/736.b429315a.chunk.js","mappings":"kTAGMA,EAAU,+BAGVC,EAAa,CACjBC,QAAS,CACPC,OAAQ,mBACRC,cAAc,UAAD,OALF,yNASR,SAAgBC,IAAvB,4CAAQ,OAAR,oBAAQ,6GAEmBC,EAAAA,EAAAA,IAAA,UAAaN,EAAb,qBAAyCC,GAF5D,cAEEM,EAFF,yBAGGA,EAASC,KAAKC,SAHjB,uCAKJC,QAAQC,MAAR,MALI,kBAMG,IANH,gFAUD,SAAgBC,EAAvB,+CAAQ,OAAR,oBAAQ,WAAyBC,GAAzB,gGAEmBP,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACDa,EADC,YAErBZ,GAJE,cAEEM,EAFF,yBAMGA,EAASC,KAAKM,MANjB,uCAQJJ,QAAQC,MAAR,MARI,kBASG,IATH,gFAaD,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA4BF,GAA5B,gGAEoBP,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACDa,EADC,YAErBZ,GAJC,cAEGM,EAFH,yBAMIA,EAASC,KAAKC,SANlB,uCAQHC,QAAQC,MAAR,MARG,kBASI,IATJ,gFAaA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA8BH,GAA9B,gGAEoBP,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACDa,GACpBZ,GAJC,cAEGM,EAFH,yBAMIA,EAASC,MANb,uCAQHE,QAAQC,MAAR,MARG,kBASI,IATJ,gFAcA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,gGAEoBZ,EAAAA,EAAAA,IAAA,UAClBN,EADkB,+BACYkB,EADZ,8CAErBjB,GAJC,cAEGM,EAFH,yBAMIA,EAASC,KAAKC,SANlB,uCAQHC,QAAQC,MAAR,MARG,kBASI,IATJ,gF,yIC7DDQ,EAAYC,EAAAA,EAAAA,IAAH,0CAITC,EAAiBD,EAAAA,EAAAA,IAAH,0FAMdE,EAAaF,EAAAA,EAAAA,IAAH,qJ,SC4BhB,EAlCa,WACX,OAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOT,EAAP,KAAaU,EAAb,KACQX,GAAYY,EAAAA,EAAAA,MAAZZ,QAcR,OAXAa,EAAAA,EAAAA,YAAU,YACRd,EAAAA,EAAAA,GAAUC,GACPc,MAAK,SAAAnB,GACJgB,EAAQhB,EACT,IACAoB,OAAM,SAAAjB,GACLD,QAAQC,MAAMA,EACf,GACJ,GAAE,CAACE,KAIF,SAACM,EAAD,WACE,wBACGL,EAAKe,KAAI,SAACC,EAAOC,GAAR,OACR,UAACV,EAAD,YACE,SAACC,EAAD,CACEU,IAAG,UAnBA,mCAmBA,OAAcF,EAAMG,cACvBC,IAAI,GACJC,MAAO,OAET,wBAAKL,EAAMM,QACX,yBAAG,eAAaN,EAAMO,eAPHN,EADb,OAcjB,C","sources":["api/api.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["\nimport axios from 'axios';\n\nconst baseUrl = 'https://api.themoviedb.org/3';\nconst apiKey = 'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1OWRjNzIzMjY1YjdjMzZiOWJhNDE0N2E5NzQ4N2M4OCIsInN1YiI6IjY1MTE3ZDllMjZkYWMxMDBhYzA5OTE3YyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.aWkR21zshqWnzB_Rinad0qTA6B3gODh5i3MASIEagk4';\n\nconst apiOptions = {\n  headers: {\n    accept: 'application/json',\n    Authorization: `Bearer ${apiKey}`,\n  },\n};\n\nexport  async function fetchPopularFilms() {\n  try {\n    const response = await axios.get(`${baseUrl}/trending/all/day`, apiOptions);\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n    return [];\n  }\n}\n\nexport  async function fetchCast(movieId) {\n  try {\n    const response = await axios.get(\n      `${baseUrl}/movie/${movieId}/credits`,\n      apiOptions\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n    return [];\n  }\n}\n\nexport async function fetchReviews(movieId) {\n  try {\n    const response = await axios.get(\n      `${baseUrl}/movie/${movieId}/reviews`,\n      apiOptions\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n    return [];\n  }\n}\n\nexport async function fetchMovieData(movieId) {\n  try {\n    const response = await axios.get(\n      `${baseUrl}/movie/${movieId}`,\n      apiOptions\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    return [];\n  }\n}\n\n\nexport async function fetchSearchMovies(movies) {\n  try {\n    const response = await axios.get(\n      `${baseUrl}/search/movie?query=${movies}&include_adult=false&language=en-US&page=1`,\n      apiOptions\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n    return [];\n  }\n}","import styled from '@emotion/styled';\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nconst ActorContainer = styled.div`\n  flex: 0 0 auto;\n  margin-right: 20px; \n  text-align: center;\n`;\n\nconst ActorImage = styled.img`\n  width: 120px;\n  height: 180px;\n  object-fit: cover;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nexport { ActorImage, Container, ActorContainer };","\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from '../../api/api';\nimport {ActorImage, Container, ActorContainer } from './Cast.styled'\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n  const urlImg = 'https://image.tmdb.org/t/p/w500';\n  \n  useEffect(() => {\n    fetchCast(movieId)\n      .then(data => {\n        setCast(data);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }, [movieId]);\n \n\n  return (\n    <Container>\n      <ul>\n        {cast.map((actor, index) => (\n          <ActorContainer key={index}>\n            <ActorImage\n              src={`${urlImg}${actor.profile_path}`}\n              alt=\"\"\n              width={120}\n            />\n            <li>{actor.name}</li>\n            <p>Character : {actor.character}</p>\n          </ActorContainer>\n        ))}\n      </ul>\n    </Container>\n  );\n};\nexport default Cast;\n"],"names":["baseUrl","apiOptions","headers","accept","Authorization","fetchPopularFilms","axios","response","data","results","console","error","fetchCast","movieId","cast","fetchReviews","fetchMovieData","fetchSearchMovies","movies","Container","styled","ActorContainer","ActorImage","useState","setCast","useParams","useEffect","then","catch","map","actor","index","src","profile_path","alt","width","name","character"],"sourceRoot":""}